---
title:  "Oauth가이드 교육"
date:   2016-01-17
categories: [교육]
comments: true
tags: [oauth]
---

#### 전반적인 Http설명(웹 브라우저와 웹 서버 사이의 데이터 통신 규칙) 

### HttpRequest
    

**example**

    GET /logo.png HTTP/1.1
    Host: www.naver.com

**Method**

    
    Method = "OPTIONS"; Section 9.2
       | "GET"; Section 9.3   <-
       | "HEAD"   ; Section 9.4
       | "POST"   ; Section 9.5   <-
       | "PUT"; Section 9.6
       | "DELETE" ; Section 9.7
       | "TRACE"  ; Section 9.8
       | "CONNECT"; Section 9.9
       | extension-method



## GET
- URL에 데이터를 포함 -> 데이터 조회에 적합
- 데이터의 전달 : 이름과 값을 쌍으로( ex. name = value )
- 데이터 구분 사용법 : `&`사용
 - 데이터가 URL에 노출
 - 인코딩/디코딩 과정 X -> POST보다 빠르다
 - URL 길이제약으로 많은 데이터 전송은 무리

## POST
- Form에서 POST를 지정하는 경우 
- 데이터는 HTTP Body에 숨겨서 전송
- GET으로 보낼 수 없는 자료를 전송할 때 사용가능

## HEAD
- GET과 동일하나 HTTP header정보만 요청
- 네트워크 대역을 절약, 리소스의 크기확인시 사용

## OPTIONS
- 어떤 HTTP 메소드를 지원하는 지 검사
- 요청한 URL에 어떤 메소드 요청이 가능한지 확인
- 보안적으로 위험, 해커들에게 중요한 정보를 제공하게 된다(비활성화)

## PUT
- URI로 지정한 서버에 있는 파일을 대치한다.
- URI로 지정한 파일이 없는 경우는 파일을 새로 작성한다.
- 보안적으로 위험, 비활성화 시킨다.

## DELETE
- URI로 지정한 서버에 있는 파일을 삭제한다
- 보안적으로 위험, 비활성화

## TRACE
- 서버측에서 받은 리퀘스트 라인과 헤더를 그대로 클라이언트로 반송한다.
- 프록시 서버 등을 쓰는 환경에서 리퀘스트가 바뀌어 써지는 모양을 살펴볼 때 사용한다.
- Request의 Loopback 테스트용으로 사용 할 수 있다

## CONNECT
- 터널링의 목적으로 연결요청
- Forward Proxy에 HTTP TLS (Transport Layer Security) 터널링 (Tunnelling)을 요청할 때 사용
<BR><BR><BR>

### HttpResponse

**example**

    HTTP/1.1 404 Not Found

**Status-Code**   
     
| Status-Code | Message | Description |
| :----------: | :---------: | :----------: |
| 200    | OK       | 모든것이 정상       |
| 204    | No Content       | 요구가 처리되었으나 클라이언트에게 전달할 문서 없음. 브라우저는 이전 문서를 계속 보여줘야 한다.       |
| 302    | Found       | 요청을 받은 뒤 바로 Location정보를 통해 이       |
| 304    | Not Modified       | 변경 없음       |
| 400    | Bad Request       | 잘못된 요청       |
| 403    | Forbidden       | 접근권한 없음       |
| 404    | Not Found       | 	요청한 내용이나 파일을 찾을 수 없음      |
| 408    | Request Timeout       | 클라이언트가 요청을 보내는 데 너무 오랜 시간이 걸림.       |
| 414    | Request URI Too Long       | URI가 너무 길어 오류 발생       |
| 500    | Internal Server Error       | 서버 에러       |
| 508    | Service Unavailable       | 	서버 한계 초과 등의 오류       |

<br><Br>

### 302 Found

    $ curl -v http://nhnent.dooray.com/      //두레이로 reqeust를 날림
    *   Trying 43.227.117.11...
    * Connected to nhnent.dooray.com (43.227.117.11) port 80 (#0)
    > GET / HTTP/1.1                         
    > Host: nhnent.dooray.com
    > User-Agent: curl/7.43.0
    > Accept: */*
    >
    < HTTP/1.1 302 Found
    < Server: nginx
    < Date: Thu, 14 Jan 2016 22:59:41 GMT
    < Content-Length: 0
    < Connection: keep-alive
    < Location: /auth/signin?nextUrl=%2F
    < Set-Cookie: SESSION=6db27a70-2f35-4956-b223-cc80aff9070a; Domain=.dooray.com; Path=/; HttpOnly
    < X-UA-Compatible: IE=Edge
    <
    * Connection #0 to host nhnent.dooray.com left intact

- 302 Found이기 때문에 요청을 받은 후 바로 Location정보를 통해 다시 요청을 한다.<br><br>

## OAuth

- Resource server -> 서버(페이스북, 사진, 비디오등)
- Resource Owner -> 나( 사용자)
- Authorization Server -> 사용장의 동의를 받아서 인증해주는 서버

### 비밀번호 인증방식의 문제
---
- 신뢰: 사용자가 애플리케이션에 ID/PW를 제공하기 꺼려함
- 피싱에 둔감해짐: 각 종 애플리케이션들에 ID/PW 를 계속 제공하는 경우
- 접근범위가 늘어남에 따른 위험 부담: ID/PW를 모두 알고 있는 애플리케이션은 모든 권한을 가짐
- 신뢰성의 제한: PW 를 변경한다면 애플리케이션은 동작을 하지 못하게 됨
- 폐기문제: 권한을 폐기할 수 있는 유일한 방법이 PW를 변경하는 것

__-> Access token을 이용하여 구분하는 방법!__
<br><br>

### OAuth 과정의 시퀀스 다이어그램
---
![sequence](https://scontent.xx.fbcdn.net/hphotos-xtl1/v/t1.0-9/12552519_946135498808831_407486787403867446_n.jpg?oh=cb906ae4d1880d78e8b783c7cfcfd051&oe=57349238)

---
- 브라우저는 어플리케이션에게 화면을 요청한다.<br>
- 어플리케이션은 브라우저에게 로그인 화면을 보여준다<br>
- 사용자는 로그인 버튼을 클릭한다.<br><br>


1.브라우저는 어플리케이션에게 로그인 요청을 한다<br>
2.어플리케이션은 302요청을 보낸다.<br>
3.302요청을 받은 브라우저는 Location정보에 따라 Payco서버로 요청을 한다.<br>
4.Payco는 로그인페이지를 브라우저에게 출력한다.<br>
5.사용자는 ID/Password를 입력한다<br>
6.인증이 성공하면 302응답을 브라우저에게 보낸다.<br>
7.브라우저가 어플리케이션에 한번더 요청을 합니다(302 응답으로)<br>


    GET
    http://nhnent.dooray.com/auth/signin/process/?
    nextUrl=/&
    code=NyP8aIFKIS6r8tm2&
    state={random_string}

- state는 보안을 위해 보내는 것이다(바뀌게 된다면 누군가가 공격을 했다는 증거)
- 뒤에서 Code를 이용해 access_token을 얻는다.

<br>
8.Payco에 Client_secret을 던져준다.

<br>
9. access_token을 얻은 후, 이 정보를 이용하여 사용자의 resource를 얻는 것이다.<br>
